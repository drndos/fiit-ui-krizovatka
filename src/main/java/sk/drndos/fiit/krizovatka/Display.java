/**
 * Display.java Filip Bedn√°rik <drndos@drndos.sk>
 *
 * @ 1.4.2013 21:07
 */
package sk.drndos.fiit.krizovatka;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JLabel;

/**
 * Main GUI
 * @author DeathX
 */
public class Display extends javax.swing.JFrame {

  private JLabel[][] all;
  private static JFileChooser dBrowse;
  private String filename;
  private Solver solver;
  private boolean solved = false;
  private boolean fifo = true;

  /**
   * Creates new form Display
   */
  private Display() {
    initComponents();
    dBrowse = new JFileChooser();
    dBrowse.setFileSelectionMode(JFileChooser.FILES_ONLY);
    jPanel1.setLayout(new GridLayout(6, 6));
    all = new JLabel[6][6];
    for (int i = 0; i < 6; i++) {
      for (int d = 0; d < 6; d++) {
        JLabel l = new JLabel();
        //l.setBorder(new BasicBorders.ButtonBorder(Color.black, Color.darkGray, Color.lightGray, Color.lightGray));
        l.setBorder(BorderFactory.createDashedBorder(null));
        l.setOpaque(true);
        l.setToolTipText("biela");
        l.setBackground(Color.white);
        l.addMouseListener(new MouseAdapter() {
          @Override
          public void mousePressed(MouseEvent me) {
            if (!solved) {
              JLabel label = (JLabel) me.getComponent();
              Color newBackground = ((Color2) colorPicker.getSelectedItem()).getNum();
              if (label.getBackground() == newBackground) {
                label.setBackground(Color.white);
                label.setToolTipText("biela");
              } else {
                label.setBackground(newBackground);
                label.setToolTipText(((Color2) colorPicker.getSelectedItem()).name());
              }
            }
          }
        });
        jPanel1.add(l);
        all[i][d] = l;
      }
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jPanel2 = new javax.swing.JPanel();
    playButton = new javax.swing.JButton();
    stopButton = new javax.swing.JButton();
    newButton = new javax.swing.JButton();
    browseButton = new javax.swing.JButton();
    colorPicker = new javax.swing.JComboBox(Color2.values());
    solveButton = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    analyzeButton = new javax.swing.JButton();
    jRadioButton1 = new javax.swing.JRadioButton();
    jRadioButton2 = new javax.swing.JRadioButton();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    browseImageButton = new javax.swing.JButton();
    captureButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jPanel1.setMinimumSize(new java.awt.Dimension(440, 368));

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 440, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
    );

    playButton.setText("Play");
    playButton.setEnabled(false);
    playButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        playButtonActionPerformed(evt);
      }
    });

    stopButton.setText("Stop");
    stopButton.setEnabled(false);
    stopButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        stopButtonActionPerformed(evt);
      }
    });

    newButton.setText("New");
    newButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        newButtonActionPerformed(evt);
      }
    });

    browseButton.setText("Browse");
    browseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        browseButtonActionPerformed(evt);
      }
    });

    colorPicker.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        colorPickerActionPerformed(evt);
      }
    });

    solveButton.setText("Solve");
    solveButton.setEnabled(false);
    solveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        solveButtonActionPerformed(evt);
      }
    });

    jLabel1.setText("Edit:");

    analyzeButton.setText("Analyze input");
    analyzeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        analyzeButtonActionPerformed(evt);
      }
    });

    jRadioButton1.setSelected(true);
    jRadioButton1.setText("FIFO");
    jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jRadioButton1ActionPerformed(evt);
      }
    });

    jRadioButton2.setText("LIFO");
    jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jRadioButton2ActionPerformed(evt);
      }
    });

    jLabel2.setText("From text:");

    jLabel3.setText("From Image:");

    browseImageButton.setText("Browse");
    browseImageButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        browseImageButtonActionPerformed(evt);
      }
    });

    captureButton.setText("Capture");
    captureButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        captureButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(colorPicker, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(analyzeButton)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton2)))
                .addGap(40, 40, 40))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(solveButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(playButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(browseButton))
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(browseImageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(captureButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(newButton)))
                .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseImageButton)
                    .addComponent(captureButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                    javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(browseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playButton)
                    .addComponent(stopButton))
                .addGap(45, 45, 45))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                    Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                    Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed

    this.playButton.setEnabled(false);
    this.stopButton.setEnabled(true);
    solver.execute();
  }//GEN-LAST:event_playButtonActionPerformed

  private void browseButtonActionPerformed(
      java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
    if (dBrowse.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
      solver = new Solver();
      this.playButton.setEnabled(false);

      this.filename = dBrowse.getSelectedFile().getAbsolutePath();
      printCars(solver.loadFile(filename));
      this.solveButton.setEnabled(true);
      this.analyzeButton.setEnabled(true);
      solved = false;
    }
  }//GEN-LAST:event_browseButtonActionPerformed

  private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
    solver = new Solver();
    solved = false;
    initializeWhiteCells();
    this.playButton.setEnabled(false);
    this.stopButton.setEnabled(false);
    this.solveButton.setEnabled(false);
    this.analyzeButton.setEnabled(true);
  }//GEN-LAST:event_newButtonActionPerformed

  private void colorPickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorPickerActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_colorPickerActionPerformed

  private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
    if (solver.solve(fifo)) {
      this.playButton.setEnabled(true);
      solver.start(this);
      solved = true;
    }
    this.solveButton.setEnabled(false);
  }//GEN-LAST:event_solveButtonActionPerformed

  private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
    this.stopButton.setEnabled(false);
    solver.cancel(true);
  }//GEN-LAST:event_stopButtonActionPerformed

  private void analyzeButtonActionPerformed(
      java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
    solver = new Solver();
    this.playButton.setEnabled(false);
    this.solveButton.setEnabled(true);
    solved = false;
    solver.loadFromArray(all);
    this.analyzeButton.setEnabled(false);

  }//GEN-LAST:event_analyzeButtonActionPerformed

  private void jRadioButton1ActionPerformed(
      java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
    this.jRadioButton1.setSelected(true);
    this.jRadioButton2.setSelected(false);
    this.fifo = true;
  }//GEN-LAST:event_jRadioButton1ActionPerformed

  private void jRadioButton2ActionPerformed(
      java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
    this.jRadioButton2.setSelected(true);
    this.jRadioButton1.setSelected(false);
    this.fifo = false;
  }//GEN-LAST:event_jRadioButton2ActionPerformed

  private void browseImageButtonActionPerformed(
      java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseImageButtonActionPerformed
    if (dBrowse.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
      solver = new Solver();
      this.playButton.setEnabled(false);

      this.filename = dBrowse.getSelectedFile().getAbsolutePath();
      printCars(solver.loadFromImage(filename));
      this.solveButton.setEnabled(true);
      this.analyzeButton.setEnabled(true);
      solved = false;

    }
  }//GEN-LAST:event_browseImageButtonActionPerformed

  private void captureButtonActionPerformed(
      java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureButtonActionPerformed

    try {
      solver = new Solver();
      printCars(solver.capture());
      this.solveButton.setEnabled(true);
      this.analyzeButton.setEnabled(true);
      solved = false;

    } catch (Exception ex) {
      Logger.getLogger(Display.class.getName()).log(Level.SEVERE, null, ex);
    }

  }//GEN-LAST:event_captureButtonActionPerformed

  /**
   * Start of the application
   *
   * @param args
   */
  public static void main(String[] args) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        Display d = new Display();
        d.setVisible(true);
      }
    });
  }

  /**
   * Prints cars from Vertex to GUI
   *
   * @param s
   */
  void printCars(Vertex s) {
    initializeWhiteCells();
    HashMap<String, Car> auta = s.getValue();
    for (Car a : auta.values()) {
      Color c = a.getColor().getNum();
      if (a.isVertical()) {
        for (int i = a.getY(); i < (a.getSize() + a.getY()); i++) {
          if (i == a.getY()) {
            all[i - 1][a.getX() - 1].setBorder(BorderFactory.createMatteBorder(1, 1, 0, 1, Color.black));
          } else if (i == (a.getSize() + a.getY() - 1)) {
            all[i - 1][a.getX() - 1].setBorder(BorderFactory.createMatteBorder(0, 1, 1, 1, Color.black));
          } else {
            all[i - 1][a.getX() - 1].setBorder(BorderFactory.createMatteBorder(0, 1, 0, 1, Color.black));
          }
          all[i - 1][a.getX() - 1].setToolTipText(a.getColor().name());
          all[i - 1][a.getX() - 1].setBackground(c);
        }
      } else {
        for (int i = a.getX(); i < (a.getSize() + a.getX()); i++) {
          if (i == a.getX()) {
            all[a.getY() - 1][i - 1].setBorder(BorderFactory.createMatteBorder(1, 1, 1, 0, Color.black));
          } else if (i == (a.getSize() + a.getX() - 1)) {
            all[a.getY() - 1][i - 1].setBorder(BorderFactory.createMatteBorder(1, 0, 1, 1, Color.black));
          } else {
            all[a.getY() - 1][i - 1].setBorder(BorderFactory.createMatteBorder(1, 0, 1, 0, Color.black));
          }
          all[a.getY() - 1][i - 1].setToolTipText(a.getColor().name());
          all[a.getY() - 1][i - 1].setBackground(c);
        }
      }
    }
  }

  private void initializeWhiteCells() {
    for (int i = 0; i < 6; i++) {
      for (int d = 0; d < 6; d++) {
        all[i][d].setBackground(Color.white);
        all[i][d].setBorder(BorderFactory.createDashedBorder(null));
        all[i][d].setToolTipText("biela");
      }
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton analyzeButton;
  private javax.swing.JButton browseButton;
  private javax.swing.JButton browseImageButton;
  private javax.swing.JButton captureButton;
  private javax.swing.JComboBox colorPicker;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JRadioButton jRadioButton1;
  private javax.swing.JRadioButton jRadioButton2;
  private javax.swing.JButton newButton;
  private javax.swing.JButton playButton;
  private javax.swing.JButton solveButton;
  private javax.swing.JButton stopButton;
  // End of variables declaration//GEN-END:variables
}
